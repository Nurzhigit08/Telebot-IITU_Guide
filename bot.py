import os
from dotenv import load_dotenv

import telebot
from telebot import types

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
TOKEN = os.getenv("BOT_TOKEN")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è

bot = telebot.TeleBot(TOKEN)

user_lang = {}  # user_id: 'ru' | 'kz' | 'en'
last_photo_message_id = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ
current_message_id = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

# üìò –ü–µ—Ä–µ–≤–æ–¥—ã
translations = {
    'start_text': {
        'ru': "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—Ä–∞—â–µ–Ω–∏—è!",
        'kz': "–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ!\n–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑!",
        'en': "Hello!\nChoose language!"
    },
    'choose_category': {
        'ru': "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        'kz': "–°–∞–Ω–∞—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑:",
        'en': "Choose category:"
    },
    'abiturient_menu': {
        'ru': "–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        'kz': "–°—ñ–∑–¥—ñ –Ω–µ “õ—ã–∑—ã“õ—Ç—ã—Ä–∞–¥—ã?",
        'en': "What are you interested in?"
    },
    'student_menu': {
        'ru': "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞?",
        'kz': "–°—ñ–∑–¥—ñ —Å—Ç—É–¥–µ–Ω—Ç —Ä–µ—Ç—ñ–Ω–¥–µ –Ω–µ “õ—ã–∑—ã“õ—Ç—ã—Ä–∞–¥—ã?",
        'en': "What are you interested in as a student?"
    },
    'abiturient_docs': {
    'ru': (
        "*–ü–µ—Ä–µ—á–µ–Ω—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:*\n"
        "‚ÄÉ1. –ê—Ç—Ç–µ—Å—Ç–∞—Ç/–¥–∏–ø–ª–æ–º —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º (–æ—Ä–∏–≥–∏–Ω–∞–ª)\n"
        "‚ÄÉ2. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ï–ù–¢ (—ç–ª. –¥–æ–∫—É–º–µ–Ω—Ç —Å —Å–∞–π—Ç–∞ certificate.testcenter.kz)\n"
        "‚ÄÉ3. 2 –∫–æ–ø–∏–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏\n"
        "‚ÄÉ4. 8 —Ñ–æ—Ç–æ 3—Ö4 (–∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)\n"
        "‚ÄÉ5. –ú–µ–¥. —Å–ø—Ä–∞–≤–∫–∞ 075/–£ (—Å–æ —Å–Ω–∏–º–∫–æ–º —Ñ–ª—é–æ—Ä–æ–≥—Ä–∞—Ñ–∏–∏ —Å—Ä–æ–∫–æ–º –Ω–µ –±–æ–ª–µ–µ 12 –º–µ—Å—è—Ü–µ–≤ –Ω–∞ –¥–∞—Ç—É –∑–∞—á–∏—Å–ª–µ–Ω–∏—è 20.08.2025)\n"
        "‚ÄÉ6. –ö–∞—Ä—Ç–∞ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–≤–∏–≤–æ–∫ (—Ñ–æ—Ä–º–∞ 063/–£)\n"
        "‚ÄÉ7. –ö–æ–ø–∏—è –ø—Ä–∏–ø–∏—Å–Ω–æ–≥–æ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞ (–¥–ª—è —é–Ω–æ—à–µ–π)\n"
        "‚ÄÉ8. –ö–æ–ø–∏—è –≥—Ä–∞–º–æ—Ç –∏ –¥–∏–ø–ª–æ–º–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –≥–æ–¥–∞"
    ),
    'kz': (
        "*“ö–∞–∂–µ—Ç—Ç—ñ “õ“±–∂–∞—Ç—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ:*\n"
        "‚ÄÉ1. –ê—Ç—Ç–µ—Å—Ç–∞—Ç/–¥–∏–ø–ª–æ–º –∂”ô–Ω–µ “õ–æ—Å—ã–º—à–∞—Å—ã (—Ç“Ø–ø–Ω“±—Å“õ–∞)\n"
        "‚ÄÉ2. “∞–ë–¢ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã (certificate.testcenter.kz —Å–∞–π—Ç—ã–Ω–∞–Ω —ç–ª. “õ“±–∂–∞—Ç)\n"
        "‚ÄÉ3. –ñ–µ–∫–µ –∫—É”ô–ª—ñ–∫—Ç—ñ“£ 2 –∫”©—à—ñ—Ä–º–µ—Å—ñ\n"
        "‚ÄÉ4. 3x4 ”©–ª—à–µ–º—ñ–Ω–¥–µ–≥—ñ 8 —Ñ–æ—Ç–æ—Å—É—Ä–µ—Ç (–∞—Ä—Ç—ã–Ω–∞ –∞—Ç—ã-–∂”©–Ω—ñ“£—ñ–∑–¥—ñ –∂–∞–∑—ã“£—ã–∑)\n"
        "‚ÄÉ5. 075/–£ –º–µ–¥–∏—Ü–∏–Ω–∞–ª—ã“õ –∞–Ω—ã“õ—Ç–∞–º–∞—Å—ã (20.08.2025 –∫“Ø–Ω—ñ–Ω–µ–Ω –∫–µ—à—ñ–∫—Ç—ñ—Ä—ñ–ª–º–µ–≥–µ–Ω —Ñ–ª—é–æ—Ä–æ–≥—Ä–∞—Ñ–∏—è–º–µ–Ω)\n"
        "‚ÄÉ6. –ï–∫–ø–µ –∫–∞—Ä—Ç–∞—Å—ã (063/–£ —Ñ–æ—Ä–º–∞)\n"
        "‚ÄÉ7. ”ò—Å–∫–µ—Ä–∏ —Ç—ñ—Ä–∫–µ—É –∫—É”ô–ª—ñ–≥—ñ–Ω—ñ“£ –∫”©—à—ñ—Ä–º–µ—Å—ñ (–µ—Ä –±–∞–ª–∞–ª–∞—Ä “Ø—à—ñ–Ω)\n"
        "‚ÄÉ8. –°–æ“£“ì—ã “Ø—à –∂—ã–ª–¥–∞“ì—ã –º–∞—Ä–∞–ø–∞—Ç—Ç–∞—Ä, –¥–∏–ø–ª–æ–º–¥–∞—Ä, IELTS 5.0+ –Ω–µ–º–µ—Å–µ TOEFL 35+ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—Ç–∞—Ä—ã"
    ),
    'en': (
        "*Required documents:*\n"
        "‚ÄÉ1. Original certificate/diploma with transcript\n"
        "‚ÄÉ2. UNT certificate (e-document from certificate.testcenter.kz)\n"
        "‚ÄÉ3. 2 copies of ID card\n"
        "‚ÄÉ4. 8 photos (3x4 cm) with name on the back\n"
        "‚ÄÉ5. Medical certificate form 075/U (with fluorography not older than 12 months before 20.08.2025)\n"
        "‚ÄÉ6. Immunization card (form 063/U)\n"
        "‚ÄÉ7. Military registration certificate copy (for male applicants)\n"
        "‚ÄÉ8. Copies of awards/diplomas (last 3 years), IELTS 5.0+ or TOEFL 35+ certificates"
    )
    },
    'study_info': {
        'ru': "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–±–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å.",
        'kz': "–°—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω –æ“õ—É —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç –º“±–Ω–¥–∞ –±–æ–ª–∞–¥—ã.",
        'en': "Study information for students will be added here."
    },
    'abiturient_price_caption': {
        'ru': '*–¶–µ–Ω—ã –∑–∞ –æ–±—É—á–µ–Ω–∏–µ*',
        'kz': '*–û“õ—É –∞“õ—ã—Å—ã*',
        'en': '*Tuition fees*'
    },
    'abiturient_dates': {
        'ru': '''*–í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã:*
        - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ï–ù–¢: —Å 28 –∞–ø—Ä–µ–ª—è –¥–æ 14 –º–∞—è
        - –†–∞–±–æ—Ç–∞ –ü—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏: —Å 20 –∏—é–Ω—è –¥–æ 25 –∞–≤–≥—É—Å—Ç–∞
        - –≠–∫–∑–∞–º–µ–Ω –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É: —Å 20 –∏—é–Ω—è –¥–æ 25 –∞–≤–≥—É—Å—Ç–∞
        - –ü–æ–¥–∞—á–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: —Å 20 –∏—é–Ω—è –¥–æ 20 –∏—é–ª—è
        - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å –≥—Ä–∞–Ω—Ç–æ–≤: —Å 13 –∏—é–ª—è –ø–æ 20 –∏—é–ª—è
        - –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞: —Å 15 –∞–≤–≥—É—Å—Ç–∞ –¥–æ 25 –∞–≤–≥—É—Å—Ç–∞
        - –ü—Ä–∏–µ–º –∑–∞—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ø–ª–∞—Ç–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ: —Å 20 –∏—é–Ω—è –¥–æ 25 –∞–≤–≥—É—Å—Ç–∞''',

        'kz': '''*–ú–∞“£—ã–∑–¥—ã –∫“Ø–Ω–¥–µ—Ä:*
        - “∞–ë–¢-“ì–∞ —Ç—ñ—Ä–∫–µ–ª—É: 28 —Å”ô—É—ñ—Ä–¥–µ–Ω 14 –º–∞–º—ã—Ä“ì–∞ –¥–µ–π—ñ–Ω
        - “ö–∞–±—ã–ª–¥–∞—É –∫–æ–º–∏—Å—Å–∏—è—Å—ã–Ω—ã“£ –∂“±–º—ã—Å—ã: 20 –º–∞—É—Å—ã–º–Ω–∞–Ω 25 —Ç–∞–º—ã–∑“ì–∞ –¥–µ–π—ñ–Ω
        - –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ –µ–º—Ç–∏—Ö–∞–Ω—ã: 20 –º–∞—É—Å—ã–º–Ω–∞–Ω 25 —Ç–∞–º—ã–∑“ì–∞ –¥–µ–π—ñ–Ω
        - “ö“±–∂–∞—Ç—Ç–∞—Ä–¥—ã —Ç–∞–ø—Å—ã—Ä—É: 20 –º–∞—É—Å—ã–º–Ω–∞–Ω 20 —à—ñ–ª–¥–µ–≥–µ –¥–µ–π—ñ–Ω
        - –ì—Ä–∞–Ω—Ç –±–∞–π“õ–∞—É—ã–Ω–∞ —Ç—ñ—Ä–∫–µ–ª—É: 13 —à—ñ–ª–¥–µ–¥–µ–Ω 20 —à—ñ–ª–¥–µ–≥–µ –¥–µ–π—ñ–Ω
        - –ö–µ–ª—ñ—Å—ñ–º—à–∞—Ä—Ç“õ–∞ “õ–æ–ª “õ–æ—é: 15 —Ç–∞–º—ã–∑–¥–∞–Ω 25 —Ç–∞–º—ã–∑“ì–∞ –¥–µ–π—ñ–Ω
        - –ê“õ—ã–ª—ã –±”©–ª—ñ–º–≥–µ ”©—Ç—ñ–Ω—ñ—à “õ–∞–±—ã–ª–¥–∞—É: 20 –º–∞—É—Å—ã–º–Ω–∞–Ω 25 —Ç–∞–º—ã–∑“ì–∞ –¥–µ–π—ñ–Ω''',

        'en': '''*Important Dates:*
        - Registration for UNT: from April 28 to May 14
        - Admission committee work: from June 20 to August 25
        - English exam: from June 20 to August 25
        - Document submission: from June 20 to July 20
        - Registration for grant competition: from July 13 to July 20
        - Contract signing: from August 15 to August 25
        - Applications for paid department: from June 20 to August 25'''
    },
    'abiturient_address': {
        'ru': "üìç *–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:*\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞\n—Å 9:00 –¥–æ 18:00\n(–°—É–±–±–æ—Ç–∞ –∏ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî –≤—ã—Ö–æ–¥–Ω—ã–µ)\n\nüìå *–ê–¥—Ä–µ—Å:*\n–ì–æ—Ä–æ–¥ –ê–ª–º–∞—Ç—ã, –ú–∞–Ω–∞—Å–∞ 34/1",
        'kz': "üìç *–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã:*\n–î“Ø–π—Å–µ–Ω–±—ñ - –ñ“±–º–∞\n—Å–∞“ì–∞—Ç 9:00-–¥–µ–Ω 18:00-–≥–µ –¥–µ–π—ñ–Ω\n(–°–µ–Ω–±—ñ –∂”ô–Ω–µ –ñ–µ–∫—Å–µ–Ω–±—ñ ‚Äî –¥–µ–º–∞–ª—ã—Å –∫“Ø–Ω–¥–µ—Ä—ñ)\n\nüìå *–ú–µ–∫–µ–Ω–∂–∞–π:*\n–ê–ª–º–∞—Ç—ã “õ–∞–ª–∞—Å—ã, –ú–∞–Ω–∞—Å –∫”©—à–µ—Å—ñ 34/1",
        'en': "üìç *Working hours:*\nMonday - Friday\nfrom 9:00 to 18:00\n(Saturday and Sunday ‚Äî closed)\n\nüìå *Address:*\nAlmaty city, Manas 34/1"
    },
    'specialties_title': {
        'ru': "üéì *–ü–µ—Ä–µ—á–µ–Ω—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π*",
        'kz': "üéì *–ú–∞–º–∞–Ω–¥—ã“õ—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ*",
        'en': "üéì *List of specialties*"
    },
    'choose_program_group': {
        'ru': "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º:",
        'kz': "–ë—ñ–ª—ñ–º –±–µ—Ä—É –±–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª–∞—Ä—ã–Ω—ã“£ —Ç–æ–±—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        'en': "Choose educational program group:"
    },
    'program_groups': {
        'ru': [
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            "–§–∏–Ω–∞–Ω—Å—ã, —ç–∫–æ–Ω–æ–º–∏–∫–∞, –±–∞–Ω–∫–æ–≤—Å–∫–æ–µ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–æ–µ –¥–µ–ª–æ",
            "–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞ –∏ —Ä–µ–ø–æ—Ä—Ç–µ—Ä—Å–∫–æ–µ –¥–µ–ª–æ"
        ],
        'kz': [
            "–ê“õ–ø–∞—Ä–∞—Ç—Ç—ã“õ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä",
            "–ê“õ–ø–∞—Ä–∞—Ç—Ç—ã“õ “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫",
            "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–ª–∞—Ä –∂”ô–Ω–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–ª—ã“õ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä",
            "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∂”ô–Ω–µ –±–∞—Å“õ–∞—Ä—É",
            "“ö–∞—Ä–∂—ã, —ç–∫–æ–Ω–æ–º–∏–∫–∞, –±–∞–Ω–∫ –∂”ô–Ω–µ —Å–∞“õ—Ç–∞–Ω–¥—ã—Ä—É —ñ—Å—ñ",
            "–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞ –∂”ô–Ω–µ —Ä–µ–ø–æ—Ä—Ç–µ—Ä–ª—ñ–∫ —ñ—Å"
        ],
        'en': [
            "Information Technology",
            "Information Security",
            "Communications and Communication Technologies",
            "Management and Administration",
            "Finance, Economics, Banking and Insurance",
            "Journalism and Reporting"
        ]
    },
}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("1Ô∏è‚É£ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru'),
        types.InlineKeyboardButton("2Ô∏è‚É£ “ö–∞–∑–∞“õ—à–∞", callback_data='lang_kz'),
        types.InlineKeyboardButton("3Ô∏è‚É£ English", callback_data='lang_en')
    )
    full_text = f"{translations['start_text']['ru']}\n\n{translations['start_text']['kz']}\n\n{translations['start_text']['en']}"
    bot.send_message(message.chat.id, full_text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    data = call.data
    lang = user_lang.get(user_id, 'ru')  # —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if data.startswith('lang_'):
        lang = data.split('_')[1]
        user_lang[user_id] = lang
        show_category(call.message, lang)

    elif data == 'category_student':
        show_student_options(call.message, lang)

    elif data == 'student_study':
        bot.send_message(call.message.chat.id, translations['study_info'][lang])

    elif data == 'abiturient_docs':
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == 'ru' else "‚¨ÖÔ∏è –ê—Ä—Ç“õ–∞" if lang == 'kz' else "‚¨ÖÔ∏è Back",
            callback_data='category_abiturient'
        ))
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=translations['abiturient_docs'][lang],
            reply_markup=markup,
            parse_mode='Markdown'
        )

    elif data == 'abiturient_prices':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –ø–æ–¥ –Ω–µ–π
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == 'ru' else "‚¨ÖÔ∏è –ê—Ä—Ç“õ–∞" if lang == 'kz' else "‚¨ÖÔ∏è Back",
            callback_data='category_abiturient'
        ))
        
        with open('images/price.jpg', 'rb') as photo:
            bot.send_photo(
                chat_id=call.message.chat.id,
                photo=photo,
                caption=translations['abiturient_price_caption'][lang],
                reply_markup=markup,  # –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –ø–æ–¥ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
                parse_mode='Markdown'
            )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        try:
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—á–Ω—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
    elif data == 'abiturient_programs':
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'last_photo' in user_lang and user_id in user_lang['last_photo']:
            try:
                bot.delete_message(call.message.chat.id, user_lang['last_photo'][user_id])
            except:
                pass
            del user_lang['last_photo'][user_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        with open('images/spec.jpeg', 'rb') as photo:
            msg = bot.send_photo(
                chat_id=call.message.chat.id,
                photo=photo,
                caption=translations['specialties_title'][lang],
                parse_mode='Markdown'
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
            if 'last_photo' not in user_lang:
                user_lang['last_photo'] = {}
            user_lang['last_photo'][user_id] = msg.message_id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
        show_program_groups(call.message, lang)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

    elif data == 'category_abiturient':
        # –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'last_photo' in user_lang and user_id in user_lang['last_photo']:
            try:
                bot.delete_message(call.message.chat.id, user_lang['last_photo'][user_id])
            except:
                pass
            del user_lang['last_photo'][user_id]
            
        if 'last_military_photo' in user_lang:
            try:
                bot.delete_message(call.message.chat.id, user_lang['last_military_photo'])
            except:
                pass
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞
        show_abiturient_options(call.message, lang)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –≥—Ä—É–ø–ø–∞–º–∏ –∏–ª–∏ –¥–µ—Ç–∞–ª—è–º–∏)
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≥—Ä–∞–º–º
    elif data.startswith('program_group_'):
        group_index = int(data.split('_')[2])
        lang = user_lang.get(call.from_user.id, 'ru')
        group_name = translations['program_groups'][lang][group_index]
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –ø–æ–∫–∞–∑—ã–≤–∞—è –¥–µ—Ç–∞–ª–∏
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º" if lang == 'ru' else "‚¨ÖÔ∏è –¢–æ–ø—Ç–∞—Ä“ì–∞ –æ—Ä–∞–ª—É" if lang == 'kz' else "‚¨ÖÔ∏è Back to groups",
            callback_data='abiturient_programs'
        ))
        
        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"*{group_name}*\n\n{translations['program_details'][lang].get(group_name, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞')}",
                reply_markup=markup,
                parse_mode='Markdown'
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    elif data == 'abiturient_dates':
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == 'ru' else "‚¨ÖÔ∏è –ê—Ä—Ç“õ–∞" if lang == 'kz' else "‚¨ÖÔ∏è Back",
            callback_data='category_abiturient'
        ))
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=translations['abiturient_dates'][lang],
            reply_markup=markup,
            parse_mode='Markdown'
        )

    elif data == 'abiturient_address':
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == 'ru' else "‚¨ÖÔ∏è –ê—Ä—Ç“õ–∞" if lang == 'kz' else "‚¨ÖÔ∏è Back",
            callback_data='category_abiturient'
        ))
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=translations['abiturient_address'][lang],
            reply_markup=markup,
            parse_mode='Markdown'
    )
        
    elif data == 'abiturient_military':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤–æ–µ–Ω–Ω–æ–π –∫–∞—Ñ–µ–¥—Ä—ã
        with open('images/military.jpeg', 'rb') as photo:
            msg = bot.send_photo(
                chat_id=call.message.chat.id,
                photo=photo,
                caption="ü™ñ –í–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞" if lang == 'ru' else "ü™ñ ”ò—Å–∫–µ—Ä–∏ –∫–∞—Ñ–µ–¥—Ä–∞" if lang == 'kz' else "ü™ñ Military department",
                parse_mode='Markdown'
                )
        user_lang['last_military_photo'] = msg.message_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == 'ru' else "‚¨ÖÔ∏è –ê—Ä—Ç“õ–∞" if lang == 'kz' else "‚¨ÖÔ∏è Back", callback_data='category_abiturient'))
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == 'ru' else "”ò—Ä–µ–∫–µ—Ç—Ç—ñ —Ç–∞“£–¥–∞“£—ã–∑:" if lang == 'kz' else "Choose an action:",
            reply_markup=markup
        )

    elif data in ['abiturient_back', 'student_back']:
        show_category(call.message, lang)

    elif data == 'back_to_start':
        start(call.message)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def show_category(message, lang):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("1Ô∏è‚É£ –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç" if lang == 'ru' else "1Ô∏è‚É£ –¢–∞–ª–∞–ø–∫–µ—Ä" if lang == 'kz' else "1Ô∏è‚É£ Applicant", callback_data='category_abiturient'),
        types.InlineKeyboardButton("2Ô∏è‚É£ –°—Ç—É–¥–µ–Ω—Ç" if lang == 'ru' else "2Ô∏è‚É£ –°—Ç—É–¥–µ–Ω—Ç" if lang == 'kz' else "2Ô∏è‚É£ Student", callback_data='category_student'),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == 'ru' else "‚¨ÖÔ∏è –ê—Ä—Ç“õ–∞" if lang == 'kz' else "‚¨ÖÔ∏è Back", callback_data='back_to_start')
    )
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=translations['choose_category'][lang], reply_markup=markup)

# –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç
def show_abiturient_options(message, lang):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üìÑ –ü–µ—Ä–µ—á–µ–Ω—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤" if lang == 'ru' else "üìÑ “ö“±–∂–∞—Ç—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ" if lang == 'kz' else "üìÑ Documents", callback_data='abiturient_docs'),
        types.InlineKeyboardButton("üìç –ê–¥—Ä–µ—Å –∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã" if lang == 'ru' else "üìç –ú–µ–∫–µ–Ω–∂–∞–π –º–µ–Ω –∂“±–º—ã—Å —É–∞“õ—ã—Ç—ã" if lang == 'kz' else "üìç Address and schedule", callback_data='abiturient_address'),
        types.InlineKeyboardButton("üìÖ –í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã" if lang == 'ru' else "üìÖ –ú–∞“£—ã–∑–¥—ã –∫“Ø–Ω–¥–µ—Ä" if lang == 'kz' else "üìÖ Important dates", callback_data='abiturient_dates'),
        types.InlineKeyboardButton("üíµ –¶–µ–Ω—ã –∑–∞ –æ–±—É—á–µ–Ω–∏–µ" if lang == 'ru' else "üíµ –û“õ—É –∞“õ—ã—Å—ã" if lang == 'kz' else "üíµ Tuition fees", callback_data='abiturient_prices'),
        types.InlineKeyboardButton("üéì –ü–µ—Ä–µ—á–µ–Ω—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π" if lang == 'ru' else "üéì –ú–∞–º–∞–Ω–¥—ã“õ—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ" if lang == 'kz' else "üéì List of specialties", callback_data='abiturient_programs'),
        types.InlineKeyboardButton("ü™ñ –í–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞" if lang == 'ru' else "ü™ñ ”ò—Å–∫–µ—Ä–∏ –∫–∞—Ñ–µ–¥—Ä–∞" if lang == 'kz' else "ü™ñ Military department", callback_data='abiturient_military'),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == 'ru' else "‚¨ÖÔ∏è –ê—Ä—Ç“õ–∞" if lang == 'kz' else "‚¨ÖÔ∏è Back", callback_data='abiturient_back')
    )

    bot.send_message(
        chat_id=message.chat.id,
        text=translations['abiturient_menu'][lang],
        reply_markup=markup
    )
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    try:
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥—Ä—É–ø–ø –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
def show_program_groups(message, lang):
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≥—Ä–∞–º–º
    for i, group_name in enumerate(translations['program_groups'][lang]):
        markup.add(types.InlineKeyboardButton(
            group_name,
            callback_data=f'program_group_{i}'
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    markup.add(types.InlineKeyboardButton(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == 'ru' else "‚¨ÖÔ∏è –ê—Ä—Ç“õ–∞" if lang == 'kz' else "‚¨ÖÔ∏è Back",
        callback_data='category_abiturient'
    ))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø
    bot.send_message(
        chat_id=message.chat.id,
        text=translations['choose_program_group'][lang],
        reply_markup=markup
    )

#Abiturient_address
@bot.callback_query_handler(func=lambda call: call.data == 'abiturient_address')
def show_abiturient_address(call):
    lang = user_lang.get(call.from_user.id, 'ru')
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == 'ru' else "‚¨ÖÔ∏è –ê—Ä—Ç“õ–∞" if lang == 'kz' else "‚¨ÖÔ∏è Back",
        callback_data='category_abiturient'
    ))
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=translations['abiturient_address'][lang],
        reply_markup=markup,
        parse_mode='Markdown'
    )


# –°—Ç—É–¥–µ–Ω—Ç
def show_student_options(message, lang):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üìö –£—á–µ–±–∞" if lang == 'ru' else "üìö –û“õ—É" if lang == 'kz' else "üìö Study", callback_data='student_study'),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == 'ru' else "‚¨ÖÔ∏è –ê—Ä—Ç“õ–∞" if lang == 'kz' else "‚¨ÖÔ∏è Back", callback_data='student_back')
    )
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=translations['student_menu'][lang], reply_markup=markup)

bot.polling(non_stop=True)